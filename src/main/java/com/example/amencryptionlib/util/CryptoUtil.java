package com.example.amencryptionlib.util;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Service;

@Service
public class CryptoUtil {

  static final int NUM_BYTES = 16;
  static final int KEY_SIZE = 128;
  static final int ITERATION_COUNT = 65536;
  static final String ENCRYPTION_SCHEME = "AES";
  static final String SECRET_KEY_PROVIDER = "PBKDF2WithHmacSHA256";

  //password and salt should be kept in a secret vault
  static final String PASSWORD = "welcome@123$";
  static final String SALT = "ABCDEFGH12345678";

  private CryptoUtil(){}

  /**
   * generates initialization vector for AES algorithm
   * most AES implementation utilize the IV with the secret key for both encryption and
   * decryption
   *
   * @return randomly generated byte array that contains the initialization vector
   */
  public static byte @NotNull [] generateInitializationVector() {
    byte[] nonce = new byte[NUM_BYTES];
    new SecureRandom().nextBytes(nonce);
    return nonce;
  }

  /**
   * generates the secret key for encryption and decryption for AES schemes
   * secret key should be kept secure
   *
   * @return SecretKey
   * @throws NoSuchAlgorithmException when inappropriate ENCRYPTION_SCHEME is uses
   */
  public static SecretKey getAESKey() throws NoSuchAlgorithmException {
    KeyGenerator keyGen = KeyGenerator.getInstance(ENCRYPTION_SCHEME);
    keyGen.init(KEY_SIZE, SecureRandom.getInstanceStrong());
    return keyGen.generateKey();
  }

  /**
   * generates a secret key from a given password and salt.
   * the iteration count should be at least 1000
   *
   * NOTE: Password and salt should be pulled in from an external configuration server like spring vault
   *
   * @return secret key
   * @throws NoSuchAlgorithmException when an invalid secret key generation algorithm is used
   * @throws InvalidKeySpecException when an inappropriate encryption scheme is used
   */
  public static @NotNull SecretKey getAESKeyFromPassword()
      throws NoSuchAlgorithmException, InvalidKeySpecException {
    SecretKeyFactory factory = SecretKeyFactory.getInstance(SECRET_KEY_PROVIDER);
    KeySpec spec = new PBEKeySpec(PASSWORD.toCharArray(), SALT.getBytes(), ITERATION_COUNT, KEY_SIZE);
    return new SecretKeySpec(factory.generateSecret(spec).getEncoded(), ENCRYPTION_SCHEME);
  }
}
